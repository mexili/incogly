const black = ({ width = 640, height = 480 } = {}) => {
	let canvas = Object.assign(document.createElement("canvas"), {
		width,
		height,
	});
	canvas.getContext("2d").fillRect(0, 0, width, height);
	let stream = canvas.captureStream();
	return Object.assign(stream.getVideoTracks()[0], {
		enabled: false,
	});
};

const silence = () => {
	let ctx = new AudioContext();
	let oscillator = ctx.createOscillator();
	let dst = oscillator.connect(ctx.createMediaStreamDestination());
	ctx.resume();
	oscillator.start();
	ctx.resume();
	return Object.assign(dst.stream.getAudioTracks()[0], {
		enabled: false,
	});
};

socket.on("user-joined", (id, clients) => {
	clients.forEach((socketListId) => {
		connections[socketListId] = new RTCPeerConnection(peerConnectionConfig);
		// Wait for their ice candidate
		connections[socketListId].onicecandidate = function (event) {
			if (event.candidate != null) {
				socket.emit(
					"signal",
					socketListId,
					JSON.stringify({ ice: event.candidate })
				);
			}
		};

		// Wait for their video stream
		connections[socketListId].onaddstream = (event) => {
			// TODO mute button, full screen button
			let searchVideo = document.querySelector(
				`[data-socket="${socketListId}"]`
			);
			if (searchVideo !== null) {
				// if i don't do this check it make an empyt square
				searchVideo.srcObject = event.stream;
			} else {
				let elms = clients.length;
				let main = document.getElementById("main");
				let cssMeasure = changeCssVideos(main, elms);
				addVideoStream(cssMeasure, main, event, socketListId);
			}
		};

		// Add the local video stream
		if (window.localStream !== undefined && window.localStream !== null) {
			connections[socketListId].addStream(window.localStream);
		} else {
			let blackSilence = (...args) =>
				new MediaStream([black(...args), silence()]);
			window.localStream = blackSilence();
			connections[socketListId].addStream(window.localStream);
		}
	});

	if (id === socketId) {
		for (let id2 in connections) {
			if (id2 === socketId) continue;

			try {
				connections[id2].addStream(window.localStream);
			} catch (e) {}
			// eslint-disable-next-line
			connections[id2].createOffer().then((description) => {
				connections[id2]
					.setLocalDescription(description)
					.then(() => {
						socket.emit(
							"signal",
							id2,
							JSON.stringify({
								sdp: connections[id2].localDescription,
							})
						);
					})
					.catch((e) => console.log(e));
			});
		}
	}
});
